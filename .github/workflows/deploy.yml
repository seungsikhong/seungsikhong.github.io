name: Deploy to GitHub Pages

# 워크플로우 실행 조건 (보안 강화)
on:
  push:
    branches: [ main ]  # main 브랜치 푸시 시만 배포 (PR 제거로 보안 강화)
  pull_request:
    branches: [ main ]  # PR에서는 빌드 테스트만 수행 (배포 X)

# GitHub Pages 배포에 필요한 최소 권한 설정
permissions:
  contents: read      # 저장소 읽기 권한만 (write 권한 제거)
  pages: write        # GitHub Pages 배포 권한
  id-token: write     # OIDC 토큰 생성 권한

# 동시 실행 방지 (배포 충돌 방지)
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업 (항상 실행)
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. 프로젝트 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 4. MDX 파일을 정적 JSON 데이터로 변환
      - name: Generate static data from MDX
        run: npm run build-data

      # 5. GitHub Pages 설정 (공식 방법)
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Next.js 정적 익스포트 설정
          static_site_generator: next

      # 6. Next.js 프로젝트 빌드
      - name: Build Next.js project
        run: npm run build

      # 7. 빌드 결과 확인
      - name: Check build output
        run: |
          ls -la out/
          echo "Build completed successfully!"

      # 8. 배포용 아티팩트 업로드 (공식 방법)
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 배포 작업 (main 브랜치에서만 실행)
  deploy:
    # 배포 환경 설정 (추가 보안)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: build

    # main 브랜치 푸시 시에만 배포 실행
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # 9. GitHub Pages에 배포 (공식 방법)
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4