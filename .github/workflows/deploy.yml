# GitHub Pages 자동 배포 워크플로우 (공식 방식)
#
# 이 워크플로우는 다음과 같은 작업을 수행합니다:
# 1. MDX 파일들을 정적 JSON 데이터로 변환
# 2. Next.js 프로젝트를 정적 사이트로 빌드
# 3. GitHub Pages에 자동 배포 (공식 방식)
#
# 실행 조건:
# - main 브랜치에 푸시할 때
# - main 브랜치로 PR이 생성될 때
name: Deploy to GitHub Pages

# 워크플로우 실행 조건
on:
  push:
    branches: [ main ]  # main 브랜치에 푸시할 때 실행
  pull_request:
    branches: [ main ]  # main 브랜치로 PR 생성 시 실행

# GitHub Pages 배포에 필요한 권한 설정
permissions:
  contents: read      # 저장소 코드 읽기 권한
  pages: write        # GitHub Pages 배포 권한
  id-token: write     # 인증 토큰 생성 권한

# 동시 실행 방지
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. 프로젝트 의존성 설치
      - name: Install dependencies
        run: npm ci

      # 4. MDX 파일을 정적 JSON 데이터로 변환
      - name: Generate static data from MDX
        run: npm run build-data

      # 5. Next.js 프로젝트 빌드
      - name: Build Next.js project
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production

      # 6. GitHub Pages 설정
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next

      # 7. 배포용 아티팩트 업로드
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # 배포 작업 (main 브랜치에서만 실행)
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    needs: build

    # main 브랜치 푸시 시에만 배포 실행
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      # 8. GitHub Pages에 배포 (공식 방식)
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4